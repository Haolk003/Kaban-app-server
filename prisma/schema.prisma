// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String    @id @default(cuid())
  email                         String   @unique 
  name                          String
  avatar                        String?
  isVerified                    Boolean   @default(false)
  verification_token            String?
  activation_code               String?
  verification_token_expires_at DateTime?
  password_reset_token_hash     String?
  password_reset_expires_at     DateTime?
  createdAt                     DateTime  @default(now())
  updatedAt                     DateTime  @updatedAt
  board                         Board[]
  account                       Account[]
  boardMembers                  BoardMember[]
  assignerTask                  Task[] @relation("assignerRelation")
  taskDiscussion                Discussion[]
  userTask                      UserTask[]
  attachments                   FileAttachment[]
  taskLikes                     TaskLike[]
}

model Account {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id])
  provider     String
  providerId   String? 
  passwordHash String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([provider,userId])
}



model Board {
  id          String   @id @default(cuid())
  title       String
  projectKey  String
  description String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  list        List[] 
  labels      Label[]
  tasks       Task[]
  member BoardMember[]

  @@unique([projectKey,ownerId])
  @@unique([title,ownerId])
}

enum Member {
MEMBER
ADMIN
OWNER
VIEWER
}

model BoardMember{
  id          String @id @default(cuid())
  userId      String
  user        User @relation(fields: [userId],references: [id])
  boardId     String
  board       Board @relation(fields: [boardId],references: [id],onDelete: Cascade)
  role        Member @default(MEMBER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

   @@unique([userId, boardId]) // Đảm bảo mỗi người dùng chỉ có một vai trò trong một bảng
}

enum Priority {
  low
  medium
  high
}
 
model List {
  id        String   @id @default(cuid())
  name      String
  boardId   String
  order     Int
  status    String
  board     Board    @relation(fields: [boardId], references: [id],onDelete:Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task[]

  @@unique([boardId,name])
  @@unique([boardId,status])
}



model Label {
  id String @id @default(cuid())
  name String
  boardId String 
  board  Board @relation(fields: [boardId],references: [id],onDelete:Cascade)
  tasks Task[]

  @@unique([name,boardId])
}

model TaskLike {
  id        String   @id @default(cuid())
  userId    String   // Người like task
  user      User     @relation(fields: [userId], references: [id])
  taskId    String   // Task được like
  task      Task     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, taskId]) // Đảm bảo mỗi người chỉ like một task một lần
  @@index([userId]) // Index cho userId
  @@index([taskId]) // Index cho taskId
}


model Task {
  id            String   @id @default(cuid())
  taskId        String 
  taskNumber    Int
  title         String
  description   String?
  orderId       Int
  listId        String
  list          List @relation(fields: [listId], references: [id],onDelete: Cascade)
  assignerId    String?
  assigner      User? @relation(fields: [assignerId],references: [id],name: "assignerRelation")
  boardId       String
  board         Board @relation(fields: [boardId],references: [id])
  labels    Label[]
  startDate     DateTime?
  dueDate       DateTime?
  subTask       Subtask[]
  discussion    Discussion[]
  assignedTo    UserTask[]
  attachments FileAttachment[]
  likes         TaskLike[]
  priority    Priority @default(medium)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt


  @@index([listId]) // Thêm index cho listId
  @@index([assignerId]) // Thêm index cho assignerId
  @@index([boardId, taskNumber])
  @@index([taskId])
}

model Subtask{
  id            String    @id @default(cuid())
  title         String
  description   String?
  isCompleted   Boolean   @default(false)
  taskId        String
  task          Task      @relation(fields: [taskId],references: [id],onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  }

  model Discussion{
    id          String    @id @default(cuid())
    content     String
    userId      String
    user        User      @relation(fields: [userId], references: [id])
    taskId      String
    task        Task      @relation(fields: [taskId],references: [id],onDelete: Cascade)
     attachments FileAttachment[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt 
  }

  model UserTask{
    id          String    @id @default(cuid())
    userId      String
    user        User     @relation(fields: [userId],references: [id])
    taskId      String
    task        Task     @relation(fields: [taskId],references: [id],onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([userId,taskId])  
  }

model  FileAttachment{
  id            String    @id @default(cuid())
  fileName      String  
  filePath      String
  fileType      String
  fileSize      Int
  taskId        String
  task          Task?       @relation(fields: [taskId],references: [id],onDelete: Cascade)
  discussionId  String    
  discussion    Discussion? @relation(fields: [discussionId],references: [id],onDelete: Cascade)
  uploadedById  String
  uploadedBy   User         @relation(fields: [uploadedById], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([taskId]) // tao index cho taskId
  @@index([discussionId]) // tao index cho discussionId
}
   
