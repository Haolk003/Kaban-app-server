# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
Indicates that an object or interface definition is an extension of another definition of that same type. This directive is for use with GraphQL subgraph libraries that do not support the extend keyword. Most commonly, these are subgraph libraries that generate their schema programmatically instead of using a static .graphql file.
"""
directive @extends on INTERFACE | OBJECT

"""
Indicates that this subgraph usually can't resolve a particular object field, but it still needs to define that field for other purposes. This directive is always used in combination with another directive that references object fields, such as @provides or @requires.
"""
directive @external on FIELD_DEFINITION | OBJECT

"""
Indicates that a definition in the subgraph schema should be omitted from the router's API schema, even if that definition is also present in other subgraphs. This means that the field is not exposed to clients at all.
"""
directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
Designates an object type as an entity and specifies its key fields. Key fields are a set of fields that a subgraph can use to uniquely identify any instance of the entity.
"""
directive @key(
  fields: String!
  resolvable: Boolean = true
) repeatable on INTERFACE | OBJECT

"""
This directive links definitions from an external specification to this schema.
"""
directive @link(import: [link__Import], url: String!) on SCHEMA

"""
Indicates that an object field is now resolved by this subgraph instead of another subgraph where it's also defined. This enables you to migrate a field from one subgraph to another.
"""
directive @override(from: String!, label: String) on FIELD_DEFINITION

"""
Specifies a set of entity fields that a subgraph can resolve, but only at a particular schema path (at other paths, the subgraph can't resolve those fields). If a subgraph can always resolve a particular entity field, do not apply this directive. Using this directive is always an optional optimization. It can reduce the total number of subgraphs that your router needs to communicate with to resolve certain operations, which can improve performance.
"""
directive @provides(fields: String!) on FIELD_DEFINITION

"""
Indicates that the resolver for a particular entity field depends on the values of other entity fields that are resolved by other subgraphs. This tells the router that it needs to fetch the values of those externally defined fields first, even if the original client query didn't request them.
"""
directive @requires(fields: String!) on FIELD_DEFINITION

"""
Indicates that an object type's field is allowed to be resolved by multiple subgraphs (by default in Federation 2, object fields can be resolved by only one subgraph).
"""
directive @shareable on FIELD_DEFINITION | OBJECT

"""
Applies arbitrary string metadata to a schema location. Custom tooling can use this metadata during any step of the schema delivery flow, including composition, static analysis, and documentation. The GraphOS Enterprise contracts feature uses @tag with its inclusion and exclusion filters.
"""
directive @tag(
  name: String!
) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION

type Account {
  createdAt: DateTime!
  id: String!
  passwordHash: String
  provider: String!
  providerId: String
  updatedAt: DateTime!
  user: User!
}

input ActivateUserDto {
  activationCode: String!
  token: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ErrorType {
  code: String
  message: String!
}

input LoginDto {
  email: String!
  password: String!
}

type LoginResponse {
  access_token: String!
  error: ErrorType
  refresh_token: String!
}

type Mutation {
  activateUser(activateUserInput: ActivateUserDto!): User!
  forgotPassword(forgotPasswordInput: forgotPasswordDto!): User!
  getGoogleAuthUrl: String!
  login(loginInput: LoginDto!): LoginResponse!
  registerUser(registerDto: RegisterDto!): RegisterResponse!
  resetPassword(resetPasswordInput: resetPasswordDto!): String!
}

type Query {
  me: User!
}

input RegisterDto {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type RegisterResponse {
  error: ErrorType
  token: String!
}

type User {
  accounts: [Account!]
  activation_code: String
  avatar: String
  createdAt: DateTime!
  email: String!
  id: String!
  isVerified: Boolean!
  name: String!
  password_reset_expires_at: DateTime
  password_reset_token_hash: String
  updatedAt: DateTime!
  verification_token: String
  verification_token_expires_at: DateTime
}

input forgotPasswordDto {
  email: String!
}

scalar link__Import

input resetPasswordDto {
  email: String!
  newPassword: String!
  token: String!
}

input AvatarDtoInput {
  url: String!
  public_id: String!
}
